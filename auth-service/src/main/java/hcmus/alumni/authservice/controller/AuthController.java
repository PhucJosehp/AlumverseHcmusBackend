package hcmus.alumni.authservice.controller;

import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.Optional;
import java.util.UUID;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import hcmus.alumni.authservice.config.AuthConfig;
import hcmus.alumni.authservice.config.CustomUserDetails;
import hcmus.alumni.authservice.model.PasswordHistoryModel;
import hcmus.alumni.authservice.model.RoleModel;
import hcmus.alumni.authservice.model.UserModel;
import hcmus.alumni.authservice.repository.EmailActivationCodeRepository;
import hcmus.alumni.authservice.repository.PasswordHistoryRepository;
import hcmus.alumni.authservice.repository.RoleRepository;
import hcmus.alumni.authservice.repository.UserRepository;
import hcmus.alumni.authservice.utils.EmailSenderUtils;
import hcmus.alumni.authservice.utils.JwtUtils;
import hcmus.alumni.authservice.utils.UserUtils;

@RestController
@RequestMapping("/auth")
public class AuthController {
	
	@Autowired
	private JwtUtils jwtUtils;
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private RoleRepository roleRepository;
	@Autowired
	private EmailActivationCodeRepository emailActivationCodeRepository;
	@Autowired
	private AuthenticationManager authenticationManager;
	@Autowired
	private PasswordEncoder passwordEncoder;
	@Autowired
    private PasswordHistoryRepository passwordHistoryRepository;

	private UserUtils userUtils = UserUtils.getInstance();
	private EmailSenderUtils emailSenderUtils = EmailSenderUtils.getInstance();

	@PostMapping("/login")
	public ResponseEntity<Map<String, String>> login(@RequestParam String email, @RequestParam String pass) {
	    try {
	        Authentication authenticate = authenticationManager
	                .authenticate(new UsernamePasswordAuthenticationToken(email, pass));
	        if (authenticate.isAuthenticated()) {
	            UserModel user = userRepository.findByEmail(email);
	            if (user == null) {
	                return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
	                        .body(Collections.singletonMap("msg", "Email hoặc password không hợp lệ"));
	            }

	            PasswordHistoryModel currentPasswordHistory = passwordHistoryRepository.findByUserId(user.getId());

	            // Kiểm tra xem mật khẩu có phải là auto-generated không
	            if (currentPasswordHistory != null && currentPasswordHistory.isAutoGenerated()) {
	                return ResponseEntity.status(HttpStatus.OK)
	                        .body(Collections.singletonMap("msg", "Vui lòng đổi mật khẩu của bạn"));
	            }

	            // Cập nhật thời gian đăng nhập cuối cùng
	            userRepository.setLastLogin(email, new Date());

	            CustomUserDetails cud = (CustomUserDetails) authenticate.getPrincipal();
	            return ResponseEntity.status(HttpStatus.OK)
	                    .body(Collections.singletonMap("jwt", jwtUtils.generateToken(cud.getUser())));
	        } else {
	            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
	                    .body(Collections.singletonMap("msg", "Email hoặc password không hợp lệ"));
	        }
	    } catch (BadCredentialsException e) {
	        return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
	                .body(Collections.singletonMap("msg", "Email hoặc password không hợp lệ"));
	    } catch (Exception e) {
	        // Catch any unexpected exceptions to prevent server errors
	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
	                .body(Collections.singletonMap("msg", "Internal server error"));
	    }
	}


	@PostMapping("/signup")
	public ResponseEntity<String> signup(@RequestParam String email, @RequestParam String pass) {
		UserModel newUser = new UserModel(email, passwordEncoder.encode(pass));

		try {
			userRepository.save(newUser);
		} catch (IllegalArgumentException e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("");
		} catch (Exception e) {
			System.err.println(e);
			return ResponseEntity.status(HttpStatus.CONFLICT).body("Email already exists");
		}

		return ResponseEntity.status(HttpStatus.CREATED).body("Signup successfully");
	}

	@PostMapping("/send-authorize-code")
	public ResponseEntity<String> sendAuthorizeCode(@RequestParam String email) {
		UserModel existingUser = userRepository.findByEmail(email);
		if (existingUser != null) {
			return ResponseEntity.status(HttpStatus.CONFLICT).body("Email already exists");
		}

		if (email == null || email.isEmpty()) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Email is required");
		}

		try {
			emailSenderUtils.sendEmail(emailActivationCodeRepository, email);
			return ResponseEntity.status(HttpStatus.CREATED).body("Send activatino code successfully");
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body("Send Authorize code failed: " + e.getMessage());
		}
	}

	@PostMapping("/verify-authorize-code")
	public ResponseEntity<String> verifyAuthorizeCode(@RequestParam String email, @RequestParam String activationCode) {
		if (email == null || email.isEmpty() || activationCode == null || activationCode.isEmpty()) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Email and activation code are required");
		}

		try {
			boolean isValid = userUtils.checkActivationCode(emailActivationCodeRepository, email, activationCode);
			if (isValid) {
				return ResponseEntity.status(HttpStatus.OK).body("Activate successfully");
			} else {
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Activation code is invalid or expired");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body("Send Authorize code failed: " + e.getMessage());
		}
	}
	
	@PreAuthorize("hasAnyAuthority('User.Create')")
	@PostMapping("/create-user")
    public ResponseEntity<String> adminCreateUser(
            @RequestParam String email,
            @RequestParam String role,
            @RequestParam String fullName) {

        UserModel newUser = new UserModel();
        newUser.setId(UUID.randomUUID().toString());
        newUser.setEmail(email);
        String pwd = AuthConfig.generateRandomPassword(10);
        newUser.setPass(passwordEncoder.encode(pwd));
        newUser.setFullName(fullName);
        newUser.setCreateAt(new Date());
        
        PasswordHistoryModel passwordHistory = new PasswordHistoryModel(newUser.getId(), newUser.getPass(), true, new Date());
        
        RoleModel roleModel = roleRepository.findByName(role);
        if (roleModel == null) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid role");
        }

        newUser.getRoles().add(roleModel);
        
        try {
            userRepository.save(newUser);
            passwordHistoryRepository.save(passwordHistory);
            emailSenderUtils.sendPasswordEmail(email, pwd);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Invalid input data");
        } catch (Exception e) {
            System.err.println(e);
            return ResponseEntity.status(HttpStatus.CONFLICT).body("Email already exists");
        }

        return ResponseEntity.status(HttpStatus.CREATED).body("User created successfully");
    }
	
	@PreAuthorize("hasAnyAuthority('User.Edit')")
	@PutMapping("/{id}")
    public ResponseEntity<String> adminUpdateUser(@PathVariable String id,
            @RequestParam(value = "email", required = false) String email,
            @RequestParam(value = "fullName", required = false) String fullName,
            @RequestParam(value = "phone", required = false) String phone,
            @RequestParam(value = "sexId", required = false) Integer sexId,
            @RequestParam(value = "dob", required = false) Date dob,
            @RequestParam(value = "socialMediaLink", required = false) String socialMediaLink,
            @RequestParam(value = "facultyId", required = false) Integer facultyId,
            @RequestParam(value = "degree", required = false) String degree,
            @RequestParam(value = "aboutMe", required = false) String aboutMe,
            @RequestParam(value = "avatarUrl", required = false) String avatarUrl,
            @RequestParam(value = "coverUrl", required = false) String coverUrl,
            @RequestParam(value = "statusId", required = false) Integer statusId) {
        
        Optional<UserModel> optionalUser = userRepository.findById (id);
        if (!optionalUser.isPresent()) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body("User not found");
        }

        UserModel user = optionalUser.get();

        if (email != null) {
            user.setEmail(email);
        }
        if (fullName != null) {
            user.setFullName(fullName);
        }
        if (phone != null) {
            user.setPhone(phone);
        }
        if (sexId != null) {
            user.setSexId(sexId);
        }
        if (dob != null) {
            user.setDob(dob);
        }
        if (socialMediaLink != null) {
            user.setSocialMediaLink(socialMediaLink);
        }
        if (facultyId != null) {
            user.setFacultyId(facultyId);
        }
        if (degree != null) {
            user.setDegree(degree);
        }
        if (aboutMe != null) {
            user.setAboutMe(aboutMe);
        }
        if (avatarUrl != null) {
            user.setAvatarUrl(avatarUrl);
        }
        if (coverUrl != null) {
            user.setCoverUrl(coverUrl);
        }
        if (statusId != null) {
            user.setStatusId(statusId);
        }

        user.setUpdateAt(new Date());

        userRepository.save(user);

        return ResponseEntity.status(HttpStatus.OK).body("User updated successfully");
    }

	@PostMapping("/reset-password")
	public ResponseEntity<String> resetPassword(@RequestParam String email, @RequestParam String oldPassword, @RequestParam String newPassword) {
	    UserModel user = userRepository.findByEmail(email);
	    if (user == null) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("User not found");
	    }

	    if (!passwordEncoder.matches(oldPassword, user.getPass())) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Old password is incorrect");
	    }

	    user.setPass(passwordEncoder.encode(newPassword));
	    user.setUpdateAt(new Date());

	    PasswordHistoryModel currentPasswordHistory = passwordHistoryRepository.findByUserId(user.getId());

	    if (currentPasswordHistory != null) {
	        currentPasswordHistory.setPassword(user.getPass());
	        currentPasswordHistory.setAutoGenerated(false);
	        currentPasswordHistory.setUpdatedAt(new Date());
	        passwordHistoryRepository.save(currentPasswordHistory);
	    } else {
	        PasswordHistoryModel passwordHistory = new PasswordHistoryModel(user.getId(), user.getPass(), false, new Date());
	        passwordHistoryRepository.save(passwordHistory);
	    }

	    userRepository.save(user);

	    return ResponseEntity.status(HttpStatus.OK).body("Password has been reset successfully");
	}


}