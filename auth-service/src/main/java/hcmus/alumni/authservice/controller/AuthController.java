package hcmus.alumni.authservice.controller;

import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import hcmus.alumni.authservice.config.CustomUserDetails;
import hcmus.alumni.authservice.dto.PermissionNameOnly;
import hcmus.alumni.authservice.dto.ResetPasswordRequestDto;
import hcmus.alumni.authservice.model.PasswordHistoryModel;
import hcmus.alumni.authservice.model.RoleModel;
import hcmus.alumni.authservice.model.UserModel;
import hcmus.alumni.authservice.repository.EmailActivationCodeRepository;
import hcmus.alumni.authservice.repository.PasswordHistoryRepository;
import hcmus.alumni.authservice.repository.PermissionRepository;
import hcmus.alumni.authservice.repository.UserRepository;
import hcmus.alumni.authservice.utils.EmailSenderUtils;
import hcmus.alumni.authservice.utils.JwtUtils;
import hcmus.alumni.authservice.utils.UserUtils;

@RestController
@RequestMapping("/auth")
public class AuthController {

	@Autowired
	private JwtUtils jwtUtils;
	@Autowired
	private UserRepository userRepository;
	@Autowired
	private EmailActivationCodeRepository emailActivationCodeRepository;
	@Autowired
	private AuthenticationManager authenticationManager;
	@Autowired
	private PasswordEncoder passwordEncoder;
	@Autowired
	private PasswordHistoryRepository passwordHistoryRepository;
	@Autowired
	private PermissionRepository permissionRepository;

	private UserUtils userUtils = UserUtils.getInstance();
	private EmailSenderUtils emailSenderUtils = EmailSenderUtils.getInstance();

	@PostMapping("/login")
	public ResponseEntity<Map<String, Object>> login(@RequestParam String email, @RequestParam String pass) {
		try {
			Authentication authenticate = authenticationManager
					.authenticate(new UsernamePasswordAuthenticationToken(email, pass));
			if (authenticate.isAuthenticated()) {
				UserModel user = userRepository.findByEmail(email);

	            PasswordHistoryModel currentPasswordHistory = passwordHistoryRepository.findByUserId(user.getId());

	            if (currentPasswordHistory != null && currentPasswordHistory.isAutoGenerated()) {
	                return ResponseEntity.status(HttpStatus.OK)
	                        .body(Collections.singletonMap("forcePasswordChange", true));
	            }

				userRepository.setLastLogin(email, new Date());
				CustomUserDetails cud = (CustomUserDetails) authenticate.getPrincipal();

				Set<RoleModel> roles = cud.getUser().getRoles();
	            List<Integer> roleIds = roles.stream().map(RoleModel::getId).collect(Collectors.toList());

	            List<PermissionNameOnly> permissionNamesOnly = permissionRepository.findPermissionNamesByRoleIds(roleIds);
	            List<String> permissionNames = permissionNamesOnly.stream()
	                .map(PermissionNameOnly::getName)
	                .distinct()
	                .collect(Collectors.toList());

				Map<String, Object> response = new HashMap<>();
				response.put("jwt", jwtUtils.generateToken(cud.getUser()));
				response.put("permissions", permissionNames);

	            return ResponseEntity.status(HttpStatus.OK).body(response);
			} else {
				return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
						.body(Collections.singletonMap("msg", "Email hoặc password không hợp lệ"));
			}
		} catch (BadCredentialsException e) {
			return ResponseEntity.status(HttpStatus.UNAUTHORIZED)
					.body(Collections.singletonMap("msg", "Email hoặc password không hợp lệ"));
			// TODO: handle exception
		} catch (Exception e) {
			// Catch any unexpected exceptions to prevent server errors
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body(Collections.singletonMap("msg", "Internal server error"));
		}

	}

	@PostMapping("/signup")
	public ResponseEntity<String> signup(@RequestParam String email, @RequestParam String pass) {
		UserModel newUser = new UserModel(email, passwordEncoder.encode(pass));

		try {
			userRepository.save(newUser);
		} catch (IllegalArgumentException e) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("");
		} catch (Exception e) {
			System.err.println(e);
			return ResponseEntity.status(HttpStatus.CONFLICT).body("Email already exists");
		}

		return ResponseEntity.status(HttpStatus.CREATED).body("Signup successfully");
	}

	@PostMapping("/send-authorize-code")
	public ResponseEntity<String> sendAuthorizeCode(@RequestParam String email) {
		UserModel existingUser = userRepository.findByEmail(email);
		if (existingUser != null) {
			return ResponseEntity.status(HttpStatus.CONFLICT).body("Email already exists");
		}

		if (email == null || email.isEmpty()) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Email is required");
		}

		try {
			emailSenderUtils.sendEmail(emailActivationCodeRepository, email);
			return ResponseEntity.status(HttpStatus.CREATED).body("Send activatino code successfully");
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body("Send Authorize code failed: " + e.getMessage());
		}
	}

	@PostMapping("/verify-authorize-code")
	public ResponseEntity<String> verifyAuthorizeCode(@RequestParam String email, @RequestParam String activationCode) {
		if (email == null || email.isEmpty() || activationCode == null || activationCode.isEmpty()) {
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Email and activation code are required");
		}

		try {
			boolean isValid = userUtils.checkActivationCode(emailActivationCodeRepository, email, activationCode);
			if (isValid) {
				return ResponseEntity.status(HttpStatus.OK).body("Activate successfully");
			} else {
				return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Activation code is invalid or expired");
			}
		} catch (Exception e) {
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
					.body("Send Authorize code failed: " + e.getMessage());
		}
	}
	
	@PostMapping("/reset-password")
	public ResponseEntity<String> resetPassword(@RequestBody ResetPasswordRequestDto req) {
	    UserModel user = userRepository.findByEmail(req.getEmail());
	    if (user == null) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("User not found");
	    }

	    if (!passwordEncoder.matches(req.getOldPassword(), user.getPass())) {
	        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Old password is incorrect");
	    }

	    user.setPass(passwordEncoder.encode(req.getNewPassword()));
	    user.setUpdateAt(new Date());

	    PasswordHistoryModel currentPasswordHistory = passwordHistoryRepository.findByUserId(user.getId());

	    if (currentPasswordHistory != null) {
	        currentPasswordHistory.setPassword(user.getPass());
	        currentPasswordHistory.setAutoGenerated(false);
	        currentPasswordHistory.setUpdatedAt(new Date());
	        passwordHistoryRepository.save(currentPasswordHistory);
	    } else {
	        PasswordHistoryModel passwordHistory = new PasswordHistoryModel(user.getId(), user.getPass(), false, new Date());
	        passwordHistoryRepository.save(passwordHistory);
	    }

	    userRepository.save(user);

	    return ResponseEntity.status(HttpStatus.OK).body("Password has been reset successfully");
	}

}